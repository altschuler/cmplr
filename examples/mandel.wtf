# Logical unary not.
op ! 1 (v)
  if v then
    0
  else
    1;
end

# Unary negate.
op - 1 (v)
  0-v;
end

# Define > with the same precedence as <.
op > 10 (LHS RHS)
  RHS < LHS;
end

# Binary logical or, which does not short circuit.
op | 5 (LHS RHS)
  if LHS then
    1
  else if RHS then
    1
  else
    0;
end

# Binary logical and, which does not short circuit.
op & 6 (LHS RHS)
  if !LHS then
    0
  else
    !!RHS;
end

# Define = with slightly lower precedence than relationals.
op = 9 (LHS RHS)
  !(LHS < RHS | LHS > RHS);
end

# Define ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
op : 1 (x y)
	y; 
end

extern pchar(char);

def printdensity(d)
  if d > 8 then
    pchar(32)  # ' '
  else if d > 4 then
    pchar(46)  # '.'
  else if d > 2 then
    pchar(43)  # '+'
  else
    pchar(42); # '*'
end
    

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane.
def mandleconverger(real imag iters creal cimag)
  if iters > 255 | (real*real + imag*imag > 4) then
    iters
  else
    mandleconverger(real*real - imag*imag + creal,
                    2*real*imag + cimag,
                    iters+1, creal, cimag);
end

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
  mandleconverger(real, imag, 0, real, imag);
end  
  
# Compute and plot the mandlebrot set with the specified 2 dimensional range
# info.

def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  for y = ymin, y < ymax, ystep in
    for x = xmin, x < xmax, xstep in
       printdensity(mandelconverge(x, y));
	end
	pchar(10);
  end
end

# mandel - This is a convenient helper function for plotting the mandelbrot set
# from the specified position with the specified Magnification.
def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart+realmag*78, realmag, imagstart, imagstart+imagmag*40, imagmag);
end
             
mandel(-1, -1.3, 0.05, 0.07);